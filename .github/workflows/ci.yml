name: 🧪 CI - Quality & Build Check
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: "18"
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  lint-and-format:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎨 Check code formatting
        run: npm run format:check

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔧 Type check
        run: npm run check-types

  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: lint-and-format

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: portfolio_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🗄️ Run Prisma migrations
        run: |
          cd apps/api
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/portfolio_test

      - name: 🧪 Run unit tests
        run: npm run test:unit --workspace=apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/portfolio_test

      - name: 🔄 Run e2e tests
        run: npm run test:e2e --workspace=apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/portfolio_test

      - name: 📊 Generate coverage report
        run: npm run test:coverage --workspace=apps/api
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/portfolio_test

      - name: 📈 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/api/coverage/lcov.info
          flags: backend

  test-frontend:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: lint-and-format

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run unit tests
        run: npm run test:unit --workspace=apps/web

      - name: 📊 Generate coverage report
        run: npm run test:coverage --workspace=apps/web

      - name: 📈 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: frontend

  build-check:
    name: 🔨 Build Verification
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [lint-and-format, test-backend, test-frontend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build applications
        run: npm run build

      - name: ✅ Verify build outputs
        run: |
          # Check backend build
          if [ ! -d "apps/api/dist" ]; then
            echo "❌ Backend build failed - dist directory not found"
            exit 1
          fi

          # Check frontend build
          if [ ! -d "apps/web/.next" ]; then
            echo "❌ Frontend build failed - .next directory not found"
            exit 1
          fi

          echo "✅ All builds successful"

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate

      - name: 🔍 Run dependency vulnerability check
        run: npx audit-ci --moderate

  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [lint-and-format, build-check, security-audit]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build API Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: false
          load: true
          tags: portfolio-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🐳 Build Web Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: false
          load: true
          tags: portfolio-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker containers startup
        run: |
          echo "🚀 Testing Docker container startup..."

          # Test API container
          echo "📡 Testing API container..."
          docker run --rm -d --name test-api \
            -e NODE_ENV=production \
            -e PORT=5000 \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            -e JWT_SECRET=test_secret \
            -p 5000:5000 \
            portfolio-api:test

          # Wait for container to start
          sleep 10

          # Check if API container is running
          if ! docker ps | grep -q test-api; then
            echo "❌ API container failed to start"
            echo "📋 API container logs:"
            docker logs test-api || echo "No logs available"
            exit 1
          fi

          echo "✅ API container started successfully"
          docker stop test-api

          # Test Web container
          echo "🌐 Testing Web container..."
          docker run --rm -d --name test-web \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -p 3000:3000 \
            portfolio-web:test

          # Wait for container to start
          sleep 10

          # Check if Web container is running
          if ! docker ps | grep -q test-web; then
            echo "❌ Web container failed to start"
            echo "📋 Web container logs:"
            docker logs test-web || echo "No logs available"
            exit 1
          fi

          echo "✅ Web container started successfully"
          docker stop test-web

  ci-status:
    name: ✅ CI Status Check
    runs-on: ubuntu-latest
    if: always() && github.event.pull_request.draft == false
    needs:
      [
        lint-and-format,
        test-backend,
        test-frontend,
        build-check,
        security-audit,
        docker-build,
      ]
    outputs:
      ci-passed: ${{ steps.status.outputs.ci_passed }}

    steps:
      - name: ✅ Evaluate CI Status
        id: status
        run: |
          echo "## 🧪 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

          # Check individual job statuses
          LINT_STATUS="${{ needs.lint-and-format.result }}"
          BACKEND_TEST_STATUS="${{ needs.test-backend.result }}"
          FRONTEND_TEST_STATUS="${{ needs.test-frontend.result }}"
          BUILD_STATUS="${{ needs.build-check.result }}"
          SECURITY_STATUS="${{ needs.security-audit.result }}"
          DOCKER_STATUS="${{ needs.docker-build.result }}"

          echo "| Lint & Format | $([[ $LINT_STATUS == 'success' ]] && echo '✅' || echo '❌') $LINT_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | $([[ $BACKEND_TEST_STATUS == 'success' ]] && echo '✅' || echo '❌') $BACKEND_TEST_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | $([[ $FRONTEND_TEST_STATUS == 'success' ]] && echo '✅' || echo '❌') $FRONTEND_TEST_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | $([[ $BUILD_STATUS == 'success' ]] && echo '✅' || echo '❌') $BUILD_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | $([[ $SECURITY_STATUS == 'success' ]] && echo '✅' || echo '❌') $SECURITY_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | $([[ $DOCKER_STATUS == 'success' ]] && echo '✅' || echo '❌') $DOCKER_STATUS |" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "$LINT_STATUS" == "success" && "$BACKEND_TEST_STATUS" == "success" && "$FRONTEND_TEST_STATUS" == "success" && "$BUILD_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$DOCKER_STATUS" == "success" ]]; then
            echo "ci_passed=true" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **All CI checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "✅ Code quality, tests, build, security, and Docker build verified." >> $GITHUB_STEP_SUMMARY
          else
            echo "ci_passed=false" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Some CI checks failed:**" >> $GITHUB_STEP_SUMMARY
            echo "📝 Please fix the failing checks before proceeding." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
